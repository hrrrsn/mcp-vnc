name: Release

on:
  workflow_dispatch:
    inputs:
      bump:
        description: 'Version bump'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - none
      custom_version:
        description: 'Custom version'
        required: false
        type: string

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: '22'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Determine version
        id: version
        run: |
          if [[ -n "${{ github.event.inputs.custom_version }}" ]]; then
            NEW_VERSION="${{ github.event.inputs.custom_version }}"
            npm version $NEW_VERSION --no-git-tag-version
          elif [[ "${{ github.event.inputs.bump }}" == "none" ]]; then
            NEW_VERSION=$(node -p "require('./package.json').version")
          else
            NEW_VERSION=$(npm version ${{ github.event.inputs.bump }} --no-git-tag-version)
          fi
          echo "version=${NEW_VERSION#v}" >> $GITHUB_OUTPUT
          echo "tag=v${NEW_VERSION#v}" >> $GITHUB_OUTPUT

      - name: Build
        run: npm run build

      - name: Generate release notes
        id: changelog
        run: |
          LAST_TAG=$(git tag --sort=-version:refname | head -n1 2>/dev/null || echo "")
          echo "Last tag found: '$LAST_TAG'"
          
          if [[ -n "$LAST_TAG" ]]; then
            echo "Getting commits from $LAST_TAG to HEAD"
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD)
            if [[ -n "$CHANGELOG" ]]; then
              echo "changes<<EOF" >> $GITHUB_OUTPUT
              echo "$CHANGELOG" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
            else
              echo "changes=No changes since last release" >> $GITHUB_OUTPUT
            fi
          else
            echo "changes=Initial release" >> $GITHUB_OUTPUT
          fi

      - name: Commit and tag
        run: |
          if [[ "${{ github.event.inputs.bump }}" != "none" || -n "${{ github.event.inputs.custom_version }}" ]]; then
            git add package.json package-lock.json
            git commit -m "chore(release): ${{ steps.version.outputs.tag }}"
          fi
          git tag ${{ steps.version.outputs.tag }}
          git push origin main --tags

      - name: Create GitHub Release
        uses: actions/create-release@0cb9c9b65d5d1901c1f53e5e66eaf4afd303e70e # v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          release_name: ${{ steps.version.outputs.tag }}
          body: |
            ## Changes
            ${{ steps.changelog.outputs.changes }}
          draft: false
          prerelease: false

      - name: Publish to npm
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
